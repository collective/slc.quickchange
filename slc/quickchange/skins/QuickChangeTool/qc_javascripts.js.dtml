var urlcomp = document.URL.split("/");
urlcomp.pop();
var PU = null;
var PUlog = null;

/* View functions */

function toggleSelectRadios(target) {
    var nodelist = ['select-by-script', 'select-by-manual','select-by-criteria'];
    for (i=0; i<nodelist.length; i++) {
        if (nodelist[i]!=target) {
            Effect.BlindUp(nodelist[i], {duration:0.5});
        }
    }
    Effect.BlindDown(target, {duration:0.5});
}    

function scheduleJob() {
    var targeturl = urlcomp.join("/")+'/Schedule';
    new Ajax.Updater('', 
        targeturl, 
        {evalScripts:true,asynchronous:true,
        onComplete: function(element) {
                        Element.hide('schedule_job');
                        Element.show('pause_job');
                        Element.hide('reset_job');
                        Element.show('stop_job');
                    }}
    );
    pollProgress(); 

}

function pauseJob() {
    var targeturl = urlcomp.join("/")+'/Pause';
    new Ajax.Updater('', 
        targeturl, 
        {evalScripts:true,asynchronous:true,
        onComplete: function(element) {
                        Element.show('schedule_job');
                        Element.hide('pause_job');
                        Element.show('reset_job');
                        Element.show('stop_job');
                    }}
    );    
    stopPollProgress(); 
    
}

function stopJob() {
    var targeturl = urlcomp.join("/")+'/Stop';
    new Ajax.Updater('', 
        targeturl, 
        {evalScripts:true,asynchronous:true,
        onComplete: function(element) {
                        Element.show('schedule_job');
                        Element.hide('pause_job');
                        Element.show('reset_job');
                        Element.hide('stop_job');
                    }}
    );   
    stopPollProgress(); 
}

function resetJob() {
    var targeturl = urlcomp.join("/")+'/Reset';
    new Ajax.Updater('', 
        targeturl, 
        {evalScripts:true,asynchronous:true,
        onComplete: function(element) {
                        Element.show('schedule_job');
                        Element.hide('pause_job');
                        Element.show('reset_job');
                        Element.hide('stop_job');
        }}
    );   
    stopPollProgress(); 

}


function resetProgressBar() {
    pollProgress(once=1);
    var the_bar = $('progress-bar');
    the_bar.style.width= '0px';
    $('progress-descriptor').innerHTML = '0 objects changed';    
}

function stopPollProgress() {
    if (PU != null) 
        PU.stop();
    Element.hide('progress');
}

function pollProgressLog() {
    var logurl = urlcomp.join("/")+'/getProgressLog';
    PUlog = new Ajax.PeriodicalUpdater('progress-log-pre', 
             logurl, 
             {frequency:3,
              decay: 1.3,
              asynchronous:true}
         );    
}

function checkBreakCondition() {
    Element.show('progress');
    if ($('job-status').innerHTML == 'finished') {
        stopPollProgress();
        return;
    }
    
}
function pollProgress(once) {
    var targeturl = urlcomp.join("/")+'/ajax_retrieveCurrentJobStatus';

    if (PU == null) {
        PU = new Ajax.PeriodicalUpdater('', 
                 targeturl, 
                 {frequency:3,
                  decay: 1.3,
                  evalScripts:true, 
                  onSuccess: checkBreakCondition,
                  asynchronous:true}
             );   
     } else { 
        PU.start();
    }
}

function initQCView() {
    if ($('status-runnable').innerHTML == 'True') {
        pollProgress();
    } else {
        pollProgress(once=1);
    }
    if ($('job-status').innerHTML == 'new') {
        Element.show('schedule_job');
        Element.hide('pause_job');
        Element.show('reset_job');
        Element.hide('stop_job');
    }
    if ($('job-status').innerHTML == 'scheduled') {
        Element.hide('schedule_job');
        Element.show('pause_job');
        Element.show('reset_job');
        Element.show('stop_job');
    }
    if ($('job-status').innerHTML == 'paused') {
        Element.show('schedule_job');
        Element.hide('pause_job');
        Element.show('reset_job');
        Element.show('stop_job');
    }
    if ($('job-status').innerHTML == 'stopped') {
        Element.show('schedule_job');
        Element.hide('pause_job');
        Element.show('reset_job');
        Element.hide('stop_job');
    }
    if ($('job-status').innerHTML == 'finished') {
        Element.hide('schedule_job');
        Element.hide('pause_job');
        Element.show('reset_job');
        Element.hide('stop_job');
    }
  
}

/* +++++++++++++++++++++++ Search functions +++++++++++++++++++++++++++++++++++ */

function retrieveSearchResults() {
    var targeturl = urlcomp.join("/")+'/retrieveSearchResults';
    var catsearch = new Ajax.Updater( 'search-result-list', 
                                      targeturl, 
                                      { method: 'get', 
                                        onLoading:function(request){
                                            Element.show('indicator');
                                        }, 
                                        onComplete: function(request){ 
                                            Element.hide('indicator');
                                            Sortable.create('search-result-list',
                                                    {dropOnEmpty: true, 
                                                     ghosting:false,
                                                     constraint:false,
                                                     containment:['search-result-list','target-object-list']
                                                    });
                                                },
                                        asynchronous: true,
                                        parameters: 'path='+encodeURIComponent($('search_path').value)+'&SearchableText='+encodeURIComponent($('searchtext').value)
                                      } 
                                     );
    
}    



function saveTargets() {
    var targeturl = urlcomp.join("/")+'/saveTargets';
    var ser = Sortable.serialize('target-object-list');
    new Ajax.Updater('save-target-msg', 
                targeturl, 
                {onLoading:function(request){
                    Element.show('indicator');
                 }, 
                 onComplete:function(request){
                        Element.hide('indicator');
                 }, 
                 parameters:qs=encodeURIComponent(ser), 
                 evalScripts:true, 
                 method: 'GET',
                 asynchronous:true
                 }
                );
}



function showIndicator(req) {
    Element.show('indicator');
}
function createTargetObjectSortable(req) {
    Sortable.create('target-object-list',
        {dropOnEmpty: true, 
         ghosting:false,
         constraint:false,
         containment:['search-result-list','target-object-list']
        });
    Element.hide('indicator');
}


function loadPool() {
    var targeturl = urlcomp.join("/")+'/ajax_LoadPool';
    new Ajax.Updater('target-object-list', 
                    targeturl, 
                    {
                        onLoading:showIndicator, 
                        evalScripts:true, 
                        method: 'GET',
                        asynchronous:false
                 }
                );
                
    var targeturl = urlcomp.join("/")+'/ajax_getNumStoredObjects';
    new Ajax.Updater('num-stored-objects', 
                    targeturl,
                    {asynchronous:true}
                );
}


function clearPool() {
    $('target-object-list').innerHTML = '';
    Sortable.create('target-object-list',
        {dropOnEmpty: true, 
         ghosting:false,
         constraint:false,
         containment:['search-result-list','target-object-list']
        });    
    var targeturl = urlcomp.join("/")+'/saveTargets';
    new Ajax.Updater('save-target-msg', 
                targeturl, 
                {onLoading:function(request){
                    Element.show('indicator');
                 }, 
                 onComplete:function(request){
                        Element.hide('indicator');
                 }, 
                 parameters:qs='', 
                 evalScripts:true, 
                 method: 'GET',
                 asynchronous:true
                 }
                );
}
function SectionShow(id, arrow_up, arrow_down) {
    Effect.BlindDown(id, {duration: 0.5});       
    Element.hide(arrow_down);
    Element.show(arrow_up);}

function SectionHide(id, arrow_up, arrow_down) {
    Effect.BlindUp(id, {duration: 0.5});
    Element.hide(arrow_up);
    Element.show(arrow_down);
}

function removeItem(i) {
    var targeturl = urlcomp.join("/")+'/ajax_removeTargetFromList';
    new Ajax.Updater('save-target-msg', 
                targeturl, 
                {onLoading:function(request){
                    Element.show('indicator');
                 }, 
                 onComplete:function(request){
                        Element.hide('indicator');
                        loadPool();
                 }, 
                 evalScripts:true, 
                 parameters:'id='+i,
                 asynchronous:true
                 }
                );               
}

function addAllResults() {
    /* calls a method that makes the query and writes all uids into the job object */
    var targeturl = urlcomp.join("/")+'/ajax_saveSnapshot';
    new Ajax.Updater('save-target-msg', 
                targeturl, 
                {onLoading:function(request){
                    Element.show('indicator');
                 }, 
                 onComplete:function(request){
                        Element.hide('indicator');
                        new Ajax.Updater('current-target-objects', urlcomp.join("/")+'/ajax_getNumStoredObjects', {asynchronous:true});
                 }, 
                 evalScripts:true, 
                 asynchronous:true
                 }
                );        
}
function addAllResultsOld() {
    var sres = $('search-result-list').innerHTML;
    var tres = $('target-object-list').innerHTML;
    $('target-object-list').innerHTML = sres+'\n'+tres;
    $('search-result-list').innerHTML = '';
    Sortable.create('target-object-list',
        {dropOnEmpty: true, 
         ghosting:false,
         constraint:false,
         containment:['search-result-list','target-object-list']
        });
}

function initQCSelect() {
    /*loadPool();*/
    /*SectionHide('select-objects-area', 'select-objects-arrow-up', 'select-objects-arrow-down');*/
}





/* ++++++++++++++++++++ Transform functions ++++++++++++++++++++++++++ */

function saveTransforms() {
    var targeturl = urlcomp.join("/")+'/saveTransforms';
    var ser = Sortable.serialize('selected-transforms-list');
    new Ajax.Updater('save-transforms-msg', 
                targeturl, 
                {onLoading:function(request){
                    Element.show('indicator');
                 }, 
                 onComplete:function(request){
                        Element.hide('indicator');
                 }, 
                 parameters:qs=encodeURIComponent(ser), 
                 evalScripts:true, 
                 method: 'GET',
                 asynchronous:true
                 }
                );
}

function showIndicator(req) {
    Element.show('indicator');
}


function refreshConfiglets() {
    var targeturl = urlcomp.join("/")+'/transform_configure_template';
    new Ajax.Updater('transform-configlets', 
                     targeturl, 
                     {evalScripts:true, 
                      asynchronous:true}
                );
}
function DivSlideDown(id) {
    Effect.SlideDown(id, {duration: 0.5});       
    Element.hide('qc-arrow-down');
    Element.show('qc-arrow-up');
}

function DivSlideUp(id) {
    Effect.SlideUp(id, {duration: 0.5});
    Element.hide('qc-arrow-up');
    Element.show('qc-arrow-down');
}

function updateDraggableTransforms() {
    var nodes = $('selected-transforms-list').childNodes;
    for (var i =0; i< nodes.length; i++) {
        var tid = nodes[i].id;
        if (tid != undefined) {
            //alert (tid);
            new Draggable(tid, {revert:true});
        }
    }
}
function loadSelectedTransforms() {
    var targeturl = urlcomp.join("/")+'/ajax_listTransforms';
    new Ajax.Updater('selected-transforms-list', 
            targeturl, 
            {onLoading:function(request){
                        Element.show('indicator')
                        }, 
             onComplete:function(request){
                        refreshConfiglets();
                        updateDraggableTransforms();                        
                        Element.hide('indicator');
                        }, 
             evalScripts:true, 
             asynchronous:false
         }
    );
}

function AddTransforms(element) {
    var targeturl = urlcomp.join("/")+'/ajax_addTransforms';
    new Ajax.Updater('selected-transforms-list', 
        targeturl, 
        {onLoading:function(request){
                    Element.show('indicator')
                    }, 
        onComplete:function(request){
                    refreshConfiglets();
                    updateDraggableTransforms();                        
                    Element.hide('indicator');
                    }, 
        parameters:'id=' + encodeURIComponent(element.id), 
        evalScripts:true, 
        asynchronous:true
        }
    );
}

function RemoveTransforms(element) {
    var targeturl = urlcomp.join("/")+'/ajax_removeTransforms';
    Element.hide(element); 
    new Ajax.Updater('selected-transforms-list', 
        targeturl, 
        {onLoading:function(request){
                    Element.show('indicator')
                    }, 
        onComplete:function(request){
                    refreshConfiglets();
                    updateDraggableTransforms();
                    Element.hide('indicator');
                    }, 
        parameters:'id=' + encodeURIComponent(element.id), 
        evalScripts:true, 
        asynchronous:true
        }
    );
}

function initQCTransforms() {
    loadSelectedTransforms();
}

function saveConfigletEntry(id) {
    var targeturl = urlcomp.join("/")+'/ajax_updateConfigletEntry';
    var V = $(id).value;
    new Ajax.Updater('', 
        targeturl, 
        {
        onComplete:function(request){
                    new Effect.Highlight(id);
                    }, 
        parameters:'id=' + encodeURIComponent(id)+'&value='+encodeURIComponent(V), 
        evalScripts:true, 
        asynchronous:true
        }
    );        
}
